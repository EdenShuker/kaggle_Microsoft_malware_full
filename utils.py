from collections import Counter
from os import listdir

from os.path import isfile, join

UNK = '_UNK_'


def get_ngrams_set_of(dir_name, f_name, n=4):
    """
    :param f_name: file name.
    :param n: num of grams to concat.
    :return: set of ngrams of the given file.
    """
    path_to_file = "%s/%s.bytes" % (dir_name, f_name)
    one_list = []
    with open(path_to_file, 'rb') as f:
        for line in f:
            # append bytes to list
            line = line.rstrip().split(" ")
            line.pop(0)  # ignore address
            one_list += line

    # array holds all 4 grams opcodes (array of strings) . use sliding window.
    grams_list = [''.join(one_list[i:i + n]) for i in xrange(len(one_list) - n + 1)]

    # create a set of ngrams out of the ngrams
    ngrams_set = set()
    ngrams_set.update(grams_list)
    return ngrams_set


def get_files_from_dir(dirpath, ending):
    """
    :param dirpath: path to directory.
    :param ending: file-ending, the type of files you want to get.
    :return: list of files names that has the given ending.
    """
    end_len = len(ending)
    files = [f[:-end_len] for f in listdir(dirpath) if isfile(join(dirpath, f)) and f.endswith(ending)]
    return files


def count_seg_counts(dir_name, f_name, seg_set):
    """
    :param dir_name: name of directory the file is in.
    :param f_name: name of file.
    :param seg_set: set of segments-names.
    :return: dict that maps segment-name to number of lines in that segment in the given file.
    """
    seg_counter = Counter()
    # TODO check that the given file has .asm file, if it has no .asm create one
    path_to_file = "%s/%s.asm" % (dir_name, f_name)

    num_unks = 0
    with open(path_to_file, 'rb') as f:
        for line in f:
            seg_name = line.split(':', 1)[0]
            if seg_name not in seg_set:  # if it is unknown segment (was not in train set) mark it as UNK
                seg_counter[UNK] += 1
                num_unks += 1
            seg_counter[seg_name] += 1
    seg_counter[UNK] = int(seg_counter[UNK] / num_unks)  # for UNK segments, take the average numer of lines
    return seg_counter


def disasm_to_bytes_file(filepath):
    pass
