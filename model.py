import pickle

import numpy as np
import xgboost as xgb
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix

import utils

ngrams_features_list = pickle.load('ngrams_features')
segments_features_set = pickle.load('segments_features')


def represent_file_as_vector(dirpath, filename):
    """
    :param dirpath: path of directory that the given file is in.
    :param filename: name of file, with the extension(= .bytes or .asm) .
    :return: vector of features that represents the given file.
    """
    vec = []

    # ngrams: array of bits- binary_feature[i]=1 if features_all[i] is in gram_dict
    curr_ngrams_set = utils.get_ngrams_set_of(dirpath, filename, n=4)
    for feature in ngrams_features_list:
        # TODO current - boolean of 'is ngram in file', optional - how many time ngrams in file
        if feature in curr_ngrams_set:
            vec.append(1)
        else:
            vec.append(0)
    # segments
    # TODO check that the given file has .asm file, if it has no .asm create one
    seg_counter = utils.count_seg_counts(dirpath, filename, segments_features_set)
    for seg_name in segments_features_set:
        if seg_name in seg_counter:
            vec.append(seg_counter[seg_name])
        else:
            vec.append(0)

    return vec


def data_as_np(data_and_labels):
    """
    :param data_and_labels: tuple of (data, labels)
    :return: the tuple where each object is np-array
    """
    data, labels = data_and_labels
    data, labels = np.array(data), np.array(labels)
    return data, labels


class CodeModel(object):
    def __init__(self, lr=0.1, n_estimators=30, max_depth=5, min_child_weight=1,
                 gamma=0, subsample=0.8, colsample_bytree=0.8, scale_pos_weight=1, seed=27):
        self.model = xgb.XGBClassifier(learning_rate=lr,
                                       n_estimators=n_estimators,
                                       max_depth=max_depth,
                                       min_child_weight=min_child_weight,
                                       gamma=gamma,
                                       subsample=subsample,
                                       colsample_bytree=colsample_bytree,
                                       scale_pos_weight=scale_pos_weight,
                                       objective='multi:softprob',
                                       seed=seed)

    def train_on(self):
        pass

    def predict_on(self, dirpath, files_list):
        """
        :param dirpath: path to directory that the given file is in.
        :param filename: name of file to predict on.
        :return:
        """
        # represent each file as a vector
        files_vecs = []
        for f_name in files_list:
            vec = represent_file_as_vector(dirpath, f_name)
            files_vecs.append(vec)
        files_vecs = np.array(files_vecs)  # convert to np arrays

        # predict
        preds = self.model.predict(files_vecs)
        return [round(val) for val in preds]

    def predict_and_accuracy_on(self, dirpath, files_list, labels, show_confusion_matrix=False):
        # predict and find accuracy
        preds = self.predict_on(dirpath, files_list)
        acc = accuracy_score(labels, preds)
        print 'accuracy %0.2f%%' % (acc * 100.0)

        # confusion matrix
        if show_confusion_matrix:
            print confusion_matrix(labels, preds)

    def save_model(self, filename):
        """ save the current model in a file, can be loaded from that file later. """
        pickle.dump(self, open(filename, 'wb'))

    @staticmethod
    def load_from(filename):
        """ load a model from file """
        model = pickle.load(open(filename, 'rb'))
        return model


if __name__ == '__main__':
    print 'hello'
